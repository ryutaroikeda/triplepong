import os
import struct
import sys
sys.path.append(os.path.abspath('src'))
from eventtype import EventType

class GameEvent:
    '''This event is used to represent events generated by the keyboard.
    This event is sent by the client to the server (to update the authoritative 
    game state) and to the client to itself (to update the local state, for 
    playing locally or making predictions).
    
    Attributes:
    event_type -- The type of the event. When reading bytes off a socket 
    stream, the event_type tells you how many more bytes to read.
    keys       -- The list of game event codes. When serializing, they are OR'd 
    together.
    frame      -- the number of frames since the start of the game.'''
    EVENT_NO_OP = 0
    EVENT_FLAP_LEFT_PADDLE = 1
    EVENT_FLAP_RIGHT_PADDLE = 2
    EVENT_FLAP_BALL = 4
    SUBFORMAT = '!iL'
    FORMAT = '!iiL'
    def __init__(self):
        self.event_type = EventType.KEYBOARD
        self.keys = []
        self.frame = 0
        pass
    def GetSize(self):
        return struct.calcsize(GameEvent.SUBFORMAT)
    def Serialize(self):
        '''
        Return value:
        The byte string representation of the event.'''
        return struct.pack(self.FORMAT, self.event_type, self.keys,
                self.frame)

    def Deserialize(self, b):
        '''Deserialize the byte string representation of the game event.
        
        The event_type should not be included in b.'''
        (self.keys, self.frame,) = struct.unpack(self.SUBFORMAT, b)
    pass
