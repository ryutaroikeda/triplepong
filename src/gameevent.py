import os
import struct
import sys
sys.path.append(os.path.abspath('src'))
from eventtype import EventType

class GameEvent:
    '''This event is used to represent events generated by the keyboard.
    This event is sent by the client to the server (to update the authoritative 
    game state).
    
    Attributes:
    event_type -- The type of the event. 
    keys       -- The list of game event codes. When serializing, they are OR'd 
                  together.
    frame      -- The frame of the event.
    keybits    -- History of keys up to 64 frames.
    '''
    EVENT_NO_OP = 0
    EVENT_FLAP_LEFT_PADDLE = 1
    EVENT_FLAP_RIGHT_PADDLE = 2
    EVENT_FLAP_BALL = 4
    SUBFORMAT = '!iQQ'
    FORMAT = '!iiQQ'
    def __init__(self):
        self.event_type = EventType.KEYBOARD
        self.keys = 0
        self.frame = 0
        self.keybits = 0
        pass

    def __eq__(self, other):
        if other == None:
            return False
        return self.__dict__ == other.__dict__

    def GetSize(self):
        return struct.calcsize(GameEvent.SUBFORMAT)

    def Serialize(self):
        '''
        Return value:
        The byte string representation of the event.'''
        return struct.pack(self.FORMAT, self.event_type, self.keys,
                self.frame, self.keybits)

    def Deserialize(self, b):
        '''Deserialize the byte string representation of the game event.
        
        The event_type should not be included in b.'''
        (self.keys, self.frame, self.keybits) = \
                struct.unpack(self.SUBFORMAT, b)
    pass
